package run.mycode.zombieland.viewer;

import run.mycode.zombieland.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;

public class Viewer extends JFrame {
    private final Scenario scenario;
    private ZombieLand currentWorld;

    private final Timer timer;

    private JComboBox<ZombieLand> scenarioChoice;
    private JButton playPauseButton;
    private JButton stepButton;
    private JButton restartButton;
    private JSlider speedSlider;
    private JPanel viewPanel;
    private WorldView worldView;
    private JScrollPane scrollPane;
    private JToolBar controlBar;

    public Viewer(Scenario scenario) {
        this.scenario = scenario;

        this.currentWorld = scenario.getWorld(0);
        showWorld(currentWorld);

        Dimension worldSize = new Dimension(currentWorld.getFullWidth(), currentWorld.getFullHeight());
        scrollPane.setPreferredSize(worldSize);
        scrollPane.setMaximumSize(worldSize);
        scrollPane.setSize(worldSize);

        Insets panelInsets = scrollPane.getBorder().getBorderInsets(worldView);
        int dx = panelInsets.left + panelInsets.right;
        int dy = panelInsets.top + panelInsets.bottom;


        Dimension panelSize = new Dimension((int) worldSize.getWidth() + dx,
                (int) (worldSize.getHeight() + controlBar.getPreferredSize().getHeight()) + dy);
        viewPanel.setPreferredSize(panelSize);

//        if (scenario.numWorlds() <= 1) {
//            scenarioChoice.setVisible(false);
//        }
        for (int i = 0; i < scenario.numWorlds(); i++) {
            scenarioChoice.addItem(scenario.getWorld(i));
        }

        scenarioChoice.addActionListener((e) ->
                showWorld((ZombieLand) scenarioChoice.getSelectedItem()));

        add(viewPanel);

        pack();

        setLocationRelativeTo(null);

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        scrollPane.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                super.componentResized(e);
                worldView.resize();
            }
        });

        timer = new Timer(1000 / 15, (e) -> {
            currentWorld.animate();
            worldView.repaint();
        });

        SwingUtilities.invokeLater(() -> {
//        Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
//        setSize(size);
//            setExtendedState(JFrame.MAXIMIZED_BOTH);
            setVisible(true);
            timer.start();
        });
    }

    public void showWorld(ZombieLand world) {
        currentWorld = world;
        worldView.setWorld(world);
    }

    public static void main(String[] args) {
        if (args.length == 0) {
            System.err.println("Specify Scenario.xml.");
            System.exit(1);
        }

        try {
            System.out.println(Viewer.class.getResource("/"));

            URL resource = Viewer.class.getResource("/scenarios/" + args[0]);

            File file;
            if (resource != null) {
                file = new File(resource.toURI());
            } else {
                file = new File(args[0]);
            }

            Scenario scenario = Scenario.load(file);

            new Viewer(scenario);
        } catch (IOException | URISyntaxException e) {
            System.err.println("Could not open file " + args[0] + ": " + e.getMessage());
            System.exit(1);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        viewPanel = new JPanel();
        viewPanel.setLayout(new BorderLayout(0, 0));
        viewPanel.setDoubleBuffered(false);
        viewPanel.setPreferredSize(new Dimension(640, 480));
        controlBar = new JToolBar();
        controlBar.setBorderPainted(true);
        controlBar.setDoubleBuffered(false);
        controlBar.setFloatable(false);
        viewPanel.add(controlBar, BorderLayout.SOUTH);
        scenarioChoice = new JComboBox();
        scenarioChoice.setPreferredSize(new Dimension(106, 38));
        controlBar.add(scenarioChoice);
        speedSlider = new JSlider();
        speedSlider.setInverted(false);
        speedSlider.setMajorTickSpacing(50);
        speedSlider.setMaximumSize(new Dimension(150, 36));
        speedSlider.setMinimumSize(new Dimension(100, 30));
        speedSlider.setMinorTickSpacing(25);
        speedSlider.setOpaque(false);
        speedSlider.setPaintLabels(false);
        speedSlider.setPaintTicks(true);
        speedSlider.setPaintTrack(true);
        speedSlider.setPreferredSize(new Dimension(150, 36));
        controlBar.add(speedSlider);
        final JSeparator separator1 = new JSeparator();
        separator1.setPreferredSize(new Dimension(0, 36));
        controlBar.add(separator1);
        playPauseButton = new JButton();
        playPauseButton.setText("Play/Pause");
        controlBar.add(playPauseButton);
        stepButton = new JButton();
        stepButton.setText("Step");
        controlBar.add(stepButton);
        restartButton = new JButton();
        restartButton.setText("Restart");
        controlBar.add(restartButton);
        scrollPane = new JScrollPane();
        scrollPane.setEnabled(false);
        viewPanel.add(scrollPane, BorderLayout.CENTER);
        worldView = new WorldView();
        worldView.setDoubleBuffered(false);
        scrollPane.setViewportView(worldView);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return viewPanel;
    }

}
